<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MBBSlib.MonoGame</name>
    </assembly>
    <members>
        <member name="T:MBBSlib.MonoGame._3D.Camera3D">
            <summary>
            This is a camera i basically remade to make it work. 
            Using quite a bit of stuff from my camera class its nearly the same as mine but its a bit simpler. 
            I have bunches of cameras at this point and i need to combine them into a fully hard core non basic camera.
            That said simple makes for a better example and a better basis to combine them later.
            </summary>
        </member>
        <member name="M:MBBSlib.MonoGame._3D.Camera3D.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.GameWindow)">
            <summary>
            Constructs the camera.
            </summary>
        </member>
        <member name="F:MBBSlib.MonoGame._3D.Camera3D._up">
            <summary>
            This serves as the cameras up. For fixed cameras this might not change at all ever. For free cameras it changes constantly.
            A fixed camera keeps a fixed horizon but can gimble lock under normal rotation when looking straight up or down.
            A free camera has no fixed horizon but can't gimble lock under normal rotation as the up changes as the camera moves.
            Most hybrid cameras are a blend of the two but all are based on one or both of the above.
            </summary>
        </member>
        <member name="F:MBBSlib.MonoGame._3D.Camera3D.CameraWorld">
            <summary>
            This serves as the cameras world orientation like almost all 3d game objects they have a world matrix. 
            It holds all orientational values and is used to move the camera properly thru the world space.
            </summary>
        </member>
        <member name="F:MBBSlib.MonoGame._3D.Camera3D.viewMatrix">
            <summary>
            The view matrice is created from the cameras world matrice but it has special properties.
            Using create look at to create this matrix you move from the world space into the view space.
            If you are working on world objects you should not take individual elements from this to directly operate on world matrix components.
            As well the multiplication of a view matrix by a world matrix moves the resulting matrix into view space itself.
            </summary>
        </member>
        <member name="F:MBBSlib.MonoGame._3D.Camera3D.projectionMatrix">
            <summary>
            The projection matrix. This matrice creates a vanishing point and skews all objects drawn to create the illusion of depth and a perspective parallax view at distance.
            </summary>
        </member>
        <member name="P:MBBSlib.MonoGame._3D.Camera3D.Position">
            <summary>
            Gets or sets the the camera's position in the world.
            </summary>
        </member>
        <member name="P:MBBSlib.MonoGame._3D.Camera3D.Forward">
            <summary>
            Gets or Sets the direction the camera is looking at in the world.
            The forward is the same as the look at direction it i a directional vector not a position.
            </summary>
        </member>
        <member name="P:MBBSlib.MonoGame._3D.Camera3D.Up">
            <summary>
            Get the cameras up vector. You shouldn't need to set the up you shouldn't at all if you are using the free camera type.
            </summary>
        </member>
        <member name="P:MBBSlib.MonoGame._3D.Camera3D.LookAtDirection">
            <summary>
            Gets or Sets the direction the camera is looking at in the world as a directional vector.
            </summary>
        </member>
        <member name="P:MBBSlib.MonoGame._3D.Camera3D.TargetPositionToLookAt">
            <summary>
            Sets a positional target in the world to look at.
            </summary>
        </member>
        <member name="P:MBBSlib.MonoGame._3D.Camera3D.LookAtTheTargetMatrix">
            <summary>
            Turns the camera to face the target this method just takes in the targets matrix for convienience.
            </summary>
        </member>
        <member name="P:MBBSlib.MonoGame._3D.Camera3D.World">
            <summary>
            Directly set or get the world matrix this also updates the view matrix
            </summary>
        </member>
        <member name="P:MBBSlib.MonoGame._3D.Camera3D.View">
            <summary>
            Gets the view matrix we never really set the view matrix ourselves outside this method just get it.
            The view matrix is remade internally when we know the world matrix forward or position is altered.
            </summary>
        </member>
        <member name="P:MBBSlib.MonoGame._3D.Camera3D.Projection">
            <summary>
            Gets the projection matrix.
            </summary>
        </member>
        <member name="M:MBBSlib.MonoGame._3D.Camera3D.ReCreateWorldAndView">
            <summary>
            When the cameras position or orientation changes, we call this to ensure that the cameras world matrix is orthanormal.
            We also set the up depending on our choices of is fix or free camera and we then update the view matrix.
            </summary>
        </member>
        <member name="M:MBBSlib.MonoGame._3D.Camera3D.ReCreateThePerspectiveProjectionMatrix(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Single)">
            <summary>
            Changes the perspective matrix to a new near far and field of view.
            </summary>
        </member>
        <member name="M:MBBSlib.MonoGame._3D.Camera3D.ReCreateThePerspectiveProjectionMatrix(System.Single,System.Single,System.Single)">
            <summary>
            Changes the perspective matrix to a new near far and field of view.
            The projection matrix is typically only set up once at the start of the app.
            </summary>
        </member>
        <member name="M:MBBSlib.MonoGame._3D.Camera3D.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            update the camera.
            </summary>
        </member>
        <member name="M:MBBSlib.MonoGame._3D.Camera3D.GetGimbleLockDangerValue">
            <summary>
            This function can be used to check if gimble is about to occur in a fixed camera.
            If this value returns 1.0f you are in a state of gimble lock, However even as it gets near to 1.0f you are in danger of problems.
            In this case you should interpolate towards a free camera. Or begin to handle it.
            Earlier then .9 in some manner you deem to appear fitting otherwise you will get a hard spin effect. Though you may want that.
            </summary>
        </member>
        <member name="M:MBBSlib.MonoGame._3D.Camera3D.NonLocalRotateLeftOrRight(Microsoft.Xna.Framework.GameTime,System.Single)">
            <summary>
            These aren't typically useful and you would just use create world for a camera snap to a new view. I leave them for completeness.
            </summary>
        </member>
        <member name="M:MBBSlib.MonoGame._3D.Camera3D.NonLocalRotateUpOrDown(Microsoft.Xna.Framework.GameTime,System.Single)">
            <summary>
            These aren't typically useful and you would just use create world for a camera snap to a new view.  I leave them for completeness.
            </summary>
        </member>
        <member name="T:MBBSlib.MonoGame._3D.CameraController">
            <summary>
            Standard set of controllers 
            </summary>
        </member>
        <member name="F:MBBSlib.MonoGame._3D.CameraController.None">
            <summary>
            DIsables camera movement
            </summary>
        </member>
        <member name="F:MBBSlib.MonoGame._3D.CameraController.Fps">
            <summary>
            First person camera controller with <see cref="P:Microsoft.Xna.Framework.Vector3.Up"/> as Yaw axis
            </summary>
        </member>
        <member name="F:MBBSlib.MonoGame._3D.CameraController.Free">
            <summary>
            Camaera controller without lockek axis
            </summary>
        </member>
        <member name="T:MBBSlib.MonoGame._3D.ICameraController">
            <summary>
            Interface for camera controllers
            </summary>
        </member>
        <member name="M:MBBSlib.MonoGame._3D.ICameraController.Update(MBBSlib.MonoGame._3D.Camera3D,Microsoft.Xna.Framework.GameTime)">
            <summary>
            Input chandling event
            </summary>
            <param name="camera"></param>
            <param name="gameTime"></param>
        </member>
        <member name="P:MBBSlib.MonoGame._3D.ICameraController.UpVector">
            <summary>
            Locked rotation axis
            </summary>
        </member>
        <member name="T:MBBSlib.MonoGame.Font">
            <summary>
            Wrapper for <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteFont"/>
            </summary>
        </member>
        <member name="M:MBBSlib.MonoGame.Font.#ctor(System.String)">
            <summary>
            Creates pointer to <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteFont"/> in <see cref="F:MBBSlib.MonoGame.GameMain._fonts"/>
            </summary>
            <param name="fontName">File name without extension</param>
        </member>
        <member name="M:MBBSlib.MonoGame.Font.op_Implicit(MBBSlib.MonoGame.Font)~Microsoft.Xna.Framework.Graphics.SpriteFont">
            <summary>
            Calls <see cref="M:MBBSlib.MonoGame.GameMain.GetFont(System.String)"/>
            </summary>
            <param name="font"><see cref="T:MBBSlib.MonoGame.Font"/> object</param>
        </member>
        <member name="T:MBBSlib.MonoGame.GameComponent">
            <summary>
            Every <see cref="T:System.Object"/> with this attribute will be automaticly instantiated during <see cref="M:MBBSlib.MonoGame.GameMain.Initialize"/>
            </summary>
        </member>
        <member name="M:MBBSlib.MonoGame.GameComponent.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:MBBSlib.MonoGame.GameMain.graphics">
            <summary>
            Defoult menager of graphics device
            </summary>
        </member>
        <member name="P:MBBSlib.MonoGame.GameMain.Instance">
            <summary>
            Last copy of GameMain class
            </summary>
        </member>
        <member name="M:MBBSlib.MonoGame.GameMain.RegisterAudioSource(MBBSlib.MonoGame.IAudioSource)">
            <summary>
            Registers existing audio source
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:MBBSlib.MonoGame.GameMain.GetTexture(System.String)">
            <summary>
            Returns a texture that corresponds to a given key
            </summary>
            <param name="key">key of a textur</param>
            <returns>2D texture</returns>
        </member>
        <member name="M:MBBSlib.MonoGame.GameMain.ContainsTextureKey(System.String)">
            <summary>
            Checks if the registry contains specified key
            </summary>
            <param name="key">key of a texture</param>
            <returns></returns>
        </member>
        <member name="M:MBBSlib.MonoGame.GameMain.GetFont(System.String)">
            <summary>
            Returns specified font from the registry 
            </summary>
            <param name="key">key of a font</param>
            <returns>spritefont reference</returns>
        </member>
        <member name="M:MBBSlib.MonoGame.GameMain.#ctor">
            <summary>
            Base class of a game
            </summary>
            <param name="main"></param>
        </member>
        <member name="F:MBBSlib.MonoGame.GameMain.BackgroundColor">
            <summary>
            Color of an background
            </summary>
        </member>
        <member name="P:MBBSlib.MonoGame.GameMain.graphicsDevice">
            <summary>
            Default graphic device
            </summary>
        </member>
        <member name="T:MBBSlib.MonoGame.IDrawable">
            <summary>
            Interface for renderer ticks
            </summary>
        </member>
        <member name="M:MBBSlib.MonoGame.IDrawable.Draw(MBBSlib.MonoGame.RenderBatch)">
            <summary>
            Calls every <see cref="M:MBBSlib.MonoGame.GameMain.Draw(Microsoft.Xna.Framework.GameTime)"/>
            </summary>
            <param name="sprite"></param>
        </member>
        <member name="T:MBBSlib.MonoGame.MultiSprite">
            <summary>
            <see cref="T:MBBSlib.MonoGame.Sprite"/> implementation for animated textures
            </summary>
        </member>
        <member name="P:MBBSlib.MonoGame.MultiSprite.Variant">
            <summary>
            Currently delected variant <see cref="F:System.String.Empty"/> for default one
            </summary>
        </member>
        <member name="M:MBBSlib.MonoGame.MultiSprite.SetTextureVariant(System.String)">
            <summary>
            Allias for <see cref="P:MBBSlib.MonoGame.MultiSprite.Variant"/>
            </summary>
            <param name="variant">Variant to use, select <see cref="F:System.String.Empty"/> for default one</param>
        </member>
        <member name="M:MBBSlib.MonoGame.MultiSprite.#ctor(System.String)">
            <summary>
            Created pointer fo rtexture in registry
            </summary>
            <param name="sprite"></param>
        </member>
        <member name="T:MBBSlib.MonoGame.Resolution">
            <summary>
            Registry of supported resolutions
            </summary>
        </member>
        <member name="F:MBBSlib.MonoGame.Resolution.Width">
            <summary>
            Width in pixels
            </summary>
        </member>
        <member name="F:MBBSlib.MonoGame.Resolution.Height">
            <summary>
            Height in pixels
            </summary>
        </member>
        <member name="P:MBBSlib.MonoGame.Resolution.Size">
            <summary>
            Size of window in vector2
            </summary>
        </member>
        <member name="P:MBBSlib.MonoGame.Resolution.UHD">
            <summary>
            3840x2160
            </summary>
        </member>
        <member name="P:MBBSlib.MonoGame.Resolution.QXGA">
            <summary>
            3200x1800
            </summary>
        </member>
        <member name="P:MBBSlib.MonoGame.Resolution.QHD">
            <summary>
            2560x1440
            </summary>
        </member>
        <member name="P:MBBSlib.MonoGame.Resolution.QWXGA">
            <summary>
            2048x1152
            </summary>
        </member>
        <member name="P:MBBSlib.MonoGame.Resolution.FHD">
            <summary>
            1920x1080
            </summary>
        </member>
        <member name="P:MBBSlib.MonoGame.Resolution.HDp">
            <summary>
            1600x900
            </summary>
        </member>
        <member name="P:MBBSlib.MonoGame.Resolution.XGA">
            <summary>
            1280x720
            </summary>
        </member>
        <member name="P:MBBSlib.MonoGame.Resolution.qHD">
            <summary>
            960x540
            </summary>
        </member>
        <member name="T:MBBSlib.MonoGame.Time">
            <summary>
            Keeps track of physics updates
            </summary>
        </member>
        <member name="P:MBBSlib.MonoGame.Time.DeltaTime">
            <summary>
            Difference between frames in ms.
            </summary>
        </member>
        <member name="P:MBBSlib.MonoGame.Time.IsPaused">
            <summary>
            Is false when game time is passing
            </summary>
        </member>
        <member name="P:MBBSlib.MonoGame.Time.TickTime">
            <summary>
            Number of ms between <see cref="E:MBBSlib.MonoGame.Time.OnTick"/> calls
            </summary>
        </member>
        <member name="E:MBBSlib.MonoGame.Time.OnTick">
            <summary>
            Gets called every <see cref="P:MBBSlib.MonoGame.Time.TickTime"/> ms when <see cref="P:MBBSlib.MonoGame.Time.IsPaused"/> is false 
            </summary>
        </member>
    </members>
</doc>
